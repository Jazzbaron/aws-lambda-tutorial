AWSTemplateFormatVersion: "2010-09-09"
#
#  Globals:
# All the attributes defined under Globals will be added to all transformable, i.e. AWS::Serverless resources.
# Policies are not supported for Globals and therefore need to be specified elsewhere. SAM does not support this for AWS::Serverless
# so a solution create/use a role with the wanted policies.
#
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  sam-app
Parameters:
  #############################
  ### Mandatory do not change ###
  #############################
  Zone:
    Type: String
  Site:
    Type: String
  Solution:
    Type: String
  Environment:
    Type: String
  Component:
    Type: String
  ComponentShortName:
    Type: String
    Default: "alt"
  Version:
    Type: String
  RegionalPrefix: #Concatenation of ${solution}-${environment} to be used when isolating regional services
    Type: String
    Default: "tutorial-eu"
  GlobalPrefix: #Concatenation of ${solution}-${site}-${environment} to be used when isolating global services
    Type: String
    Default: "tutorial-eu-north"

  #############################
  ### config.yml ###
  #############################

#Global values for lambdas
Globals:
  Function:
    Runtime: java11
    MemorySize: 1028
    Timeout: 30
    Environment:
      Variables:
        component: !Ref Component
        componentShortName: !Ref ComponentShortName
        version: !Ref Version
        zone: !Ref Zone
        site: !Ref Site
        solution: !Ref Solution
        environment: !Ref Environment

Resources:
  #Lambda Functions
  SimpleLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description:
      FunctionName: !Sub "${RegionalPrefix}-${ComponentShortName}-SimpleLambda"
      Handler: "com.nexer.tutorial.aws.functions.SimpleLambdaFunction::handleRequest"
      CodeUri: ../../../target/aws-lambda-tutorial-1.0-SNAPSHOT.jar
      Role: !GetAtt SimpleLambdaRole.Arn

  # Lambda Functions Roles #
  SimpleLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - apigateway.amazonaws.com
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: "*"

  SimpleLambdaDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref SimpleLambdaAPI
  SimpleLambdaStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 1
          MetricsEnabled: true
          DataTraceEnabled: true
      RestApiId: !Ref SimpleLambdaAPI
      DeploymentId: !Ref SimpleLambdaDeployment
      StageName: !Sub '${RegionalPrefix}-stage'

#  BasepathMapping:
#    Type: 'AWS::ApiGateway::BasePathMapping'
#    Properties:
#      DomainName:
#      Stage: !Ref SimpleLambdaStage
#      RestApiId: !Ref SimpleLambdaAPI

# DynamoDB Resource. Read more:
  # --> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  #myDynamoDBTable:
  #  Type: AWS::DynamoDB::Table
  #  Properties:
  #    AttributeDefinitions:
  #      - AttributeName: "Album"
  #        AttributeType: "S"
  #      - AttributeName: "Artist"
  #        AttributeType: "S"
  #      - AttributeName: "Sales"
  #        AttributeType: "N"
  #      - AttributeName: "NumberOfSongs"
  #        AttributeType: "N"
  #    KeySchema:
  #      - AttributeName: "Album"
  #        KeyType: "HASH"
  #      - AttributeName: "Artist"
  #        KeyType: "RANGE"
  #    ProvisionedThroughput:
  #      ReadCapacityUnits: "5"
  #      WriteCapacityUnits: "5"
  #    TableName: "myTableName"
  #    GlobalSecondaryIndexes:
  #      - IndexName: "myGSI"
  #        KeySchema:
  #          - AttributeName: "Sales"
  #            KeyType: "HASH"
  #          - AttributeName: "Artist"
  #            KeyType: "RANGE"
  #        Projection:
  #          NonKeyAttributes:
  #            - "Album"
  #            - "NumberOfSongs"
  #          ProjectionType: "INCLUDE"
  #        ProvisionedThroughput:
  #          ReadCapacityUnits: "5"
  #          WriteCapacityUnits: "5"
  #      - IndexName: "myGSI2"
  #        KeySchema:
  #          - AttributeName: "NumberOfSongs"
  #            KeyType: "HASH"
  #          - AttributeName: "Sales"
  #            KeyType: "RANGE"
  #        Projection:
  #          NonKeyAttributes:
  #            - "Album"
  #            - "Artist"
  #          ProjectionType: "INCLUDE"
  #        ProvisionedThroughput:
  #          ReadCapacityUnits: "5"
  #          WriteCapacityUnits: "5"
  #    LocalSecondaryIndexes:
  #      - IndexName: "myLSI"
  #        KeySchema:
  #          - AttributeName: "Album"
  #            KeyType: "HASH"
  #          - AttributeName: "Sales"
  #            KeyType: "RANGE"
  #        Projection:
  #          NonKeyAttributes:
  #            - "Artist"
  #            - "NumberOfSongs"
  #          ProjectionType: "INCLUDE"

  #API
  SimpleLambdaAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub "alt-SimpleLambdaAPI"
      Parameters:
        endpointConfigurationTypes: REGIONAL
      Body:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "api.yml"

Outputs:
  SimpleLambdaApiId:
    Description: Reference of the API Gateway in this stack
    Value: !Ref SimpleLambdaAPI
    Export:
      Name: !Sub 'alt-api-id'