openapi: 3.0.0
info:
  title: "Lambda Tutorial API"
  x-api-id: d9cd49ac-87fc-11eb-8dcd-0242ac130003
  x-service-provider: aws-tutorial
  x-audience: EXTERNAL_PARTNER
  version: "1.1.1"
  contact:
    name: Josef Al-sader, Nexer
    email: josef.al-sader@nexergroup.com
x-amazon-apigateway-request-validators:
  params-only:
    validateRequestParameters: true
    validateRequestBody: true
servers:
  - url: "#url_placeholder#"
paths:
  /helloworld:
    post:
      summary: Returns hello world
      description: Returns a message if operation is successful or not. This showcases that the lambda works.

      responses:
        '200':
          description: "200 OK Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SimpleLambda"
        '400':
          description: "Bad request"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/InvalidResponse"
        '500':
          description: "Internal server error"
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/InvalidResponse"

components:
#  securitySchemes:
#    authorizer:
#      type: "apiKey"
#      name: "Authorization"
#      in: "header"
#      x-amazon-apigateway-authtype: "custom"
#      x-amazon-apigateway-authorizer:
#        type: "token"
#        identitySource: method.request.header.Authorization
#        authorizerCredentials:
#          Fn::GetAtt: Authorizer.Outputs.AuthorizerRole
#        authorizerUri:
#          Fn::Sub:
#            - 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
#            - lambdaArn:
#                Fn::GetAtt:
#                  Authorizer.Outputs.AuthorizerArn
#        authorizerResultTtlInSeconds: 0
  parameters:
    InvalidResponse:
      type: object
      required:
        - title
        - status
      properties:
        title:
          type: string
          description: A short, summary of the problem type e.g Service Unavailable
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: A short, specific summary of the problem type e.g database connection is down
        instance:
          type: string
          format: uri

  x-amazon-apigateway-gateway-responses:
    ACCESS_DENIED:
      # The gateway response for authorization failure; for example, when access is denied by a custom or Amazon Cognito authorizer. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status code: 403
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Access Denied", "status": 403, "detail": $context.error.messageString }'
    API_CONFIGURATION_ERROR:
      # The gateway response for invalid API configuration, including invalid endpoint address submitted, Base64 decoding failed on binary data when binary support is enacted, or integration response mapping cannot match any template and no default template is configured. If the response type is unspecified, this response defaults to the DEFAULT_5XX type.
      # Default status code: 500
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "API Configuration Error", "status": 500, "detail": $context.error.messageString }'
    AUTHORIZER_CONFIGURATION_ERROR:
      # The gateway response for failing to connect to a custom or Amazon Cognito authorizer. If the response type is unspecified, this response defaults to the DEFAULT_5XX type.
      # Default status code: 500
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Authorizer Configuration Error", "status": 500, "detail": $context.error.messageString }'
    AUTHORIZER_FAILURE:
      # The gateway response when a custom or Amazon Cognito authorizer failed to authenticate the caller. If the response type is unspecified, this response defaults to the DEFAULT_5XX type.
      # Default status code: 500
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Authorizer Failure", "status": 500, "detail": $context.error.messageString }'
    BAD_REQUEST_BODY:
      # The gateway response when the request body cannot be validated according to an enabled request validator. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status code: 400
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Bad Request Body", "status": 400, "detail": $context.error.validationErrorString }'
    BAD_REQUEST_PARAMETERS:
      # The gateway response when the request parameter cannot be validated according to an enabled request validator. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status code: 400
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Bad Request Parameters", "status": 400, "detail": $context.error.messageString }'
    EXPIRED_TOKEN:
      # The gateway response for an AWS authentication token expired error. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status code: 403
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Token Expired", "status": 403, "detail": $context.error.messageString }'
    INTEGRATION_FAILURE:
      # The gateway response for an integration failed error. If the response type is unspecified, this response defaults to the DEFAULT_5XX type.
      # Default status code: 504
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Integration Failure", "status": 504, "detail": $context.error.messageString }'
    INTEGRATION_TIMEOUT:
      # The gateway response for an integration timed out error. If the response type is unspecified, this response defaults to the DEFAULT_5XX type.
      # Default status code: 504
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Integration Timeout", "status": 504, "detail": $context.error.messageString }'
    INVALID_API_KEY:
      # The gateway response for an invalid API key submitted for a method requiring an API key. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 403
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Invalid API Key", "status": 403, "detail": $context.error.messageString }'
    INVALID_SIGNATURE:
      # The gateway response for an invalid AWS signature error. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 403
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Invalid Signature", "status": 403, "detail": $context.error.messageString }'
    MISSING_AUTHENTICATION_TOKEN:
      # The gateway response for a missing authentication token error, including the cases when the client attempts to invoke an unsupported API method or resource. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 403
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Missing Authentication Token", "status": 403, "detail": $context.error.messageString }'
    QUOTA_EXCEEDED:
      # The gateway response for the usage plan quota exceeded error. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 429
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Quota Exceeded", "status": 429, "detail": $context.error.messageString }'
    REQUEST_TOO_LARGE:
      # The gateway response for the request too large error. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 413
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Request Too Large", "status": 413, "detail": $context.error.messageString }'
    RESOURCE_NOT_FOUND:
      # The gateway response when API Gateway cannot find the specified resource after an API request passes authentication and authorization, except for API key authentication and authorization. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 404
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Not Found", "status": 404, "detail": $context.error.messageString }'
    THROTTLED:
      # The gateway response when usage plan-, method-, stage-, or account-level throttling limits exceeded. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 429
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Throttled", "status": 429, "detail": $context.error.messageString }'
    UNAUTHORIZED:
      # The gateway response when the custom or Amazon Cognito authorizer failed to authenticate the caller.
      # Default status Code: 401
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Unauthorized", "status": 401, "detail": $context.error.messageString }'
    UNSUPPORTED_MEDIA_TYPE:
      # The gateway response when a payload is of an unsupported media type, if strict passthrough behavior is enabled. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 415
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Unsupported Media Type", "status": 415, "detail": $context.error.messageString }'
    WAF_FILTERED:
      # The gateway response when a request is blocked by AWS WAF. If the response type is unspecified, this response defaults to the DEFAULT_4XX type.
      # Default status Code: 403
      responseTemplates:
        application/problem+json:
          '{ "type": "about:blank", "title": "Forbidden", "status": 403, "detail": "Blocked by WAF. $context.error.message" }'